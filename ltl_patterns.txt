[]("call Enqueue(d1)" & (!"return Dequeue(d1)" U "call Top Down") -> <>("call Top Down" & <>"call P(d1,*)"))
[]("call Enqueue(d1)" & (!"return Dequeue(d1)" U "call Bottom Up") -> <>("call Bottom Up" & <>"call P(d1,*)"))
[](("call Enqueue(d1)" & (!"return Dequeue(d1)" U ("call Enqueue(d2)" & (!"return Dequeue(d1)" & !"return Dequeue(d2)" U "call Top Down")))) -> <>("call Top Down" & <>("call P(d1)" & <>"call P(d2)")))
[]("call Enqueue" & (!"return Dequeue" U "call Empty") -><>("call Empty" & <>"return Empty(false)"))
[](("call Enqueue(d1)" & <>"return Empty(true)") ->(!"return Empty(true)" U "return Dequeue(d1)"))
[](("call" & <>"open") -> ((!"atfloor" & !"open") U ("open" | (("atfloor" & !"open") U ("open" | ((!"atfloor" & !"open") U ("open" | (("atfloor" & !"open") U ("open" | (!"atfloor" U "open"))))))))))
[]("OpenNetworkConnection" -> []("NetworkError" -> <>"ErrorMessage"))
[](("PopServerConnected" & <>"PlacedinMailboxes") ->(!"PlacedinMailboxes" U "MessagesTransfered"))
<>"QueuedMailSent" -> (!"QueuedMailSent" U "SMTPServerConnected")
[]((!"MailboxSelected") | <>("MailboxSelected" & <>"MailboxWindowOpen"))
[]((!"MessageReady") | <>("MessageReady" & <>"MessageinOutbox"))
[]((!"MessageDragged") | <>("MessageDragged" & <>"MessageMoved"))
[]("Error" -> []("ErrorPopup" -> <>"ResponsetoPopup"))
[]("MessageTransferred" -> []("PlacedinMailboxes" -> <>"MarkasUnread"))
[](!"POPServerMessageDelete") | <>("POPServerMessageDelete" & <>"PlacedinMailboxes")
(<>"call Execute") -> ((!"call doWork") U "call Execute")
[](("return Execute" && (<>"call Execute")) -> ((!"call doWork") U "call Execute"))
[]("call doResults:i" ->((!"call doResults:j") U ("return doResults:i" || [](!"call doResults:j"))))
[](("call doResults:i" && <>"return doResults:i") ->((!"call doResults:j") U "return doResults:i"))
[]("return resultlock.wait:i" -> <>"call resultlock.signal:i")
[]("call doWork:i" -> <>"return doWork:i")
[]("call doResult:i" -> <>"return doResult:i") ->[]("return resultlock.wait:i" -> <>"call resultlock.signal:i")
((!"return Execute") U ("return pool.Complete"|| [] (!"return Execute")))
[]!("call Create:i" || "call Destroy:i" || "call Input:i" || "call Execute:i" || "call GetResults:i")
[]("txB1==0" -> <>"txB1==1")
[]((state0 & !state1 & !state2 & !state3) | (!state0 & state1 & !state2 & !state3) |(!state0 & !state1 & state2 & !state3) | (!state0 & !state1 & !state2 & state3) )
[]((state0 & <>state1) -> !(state2 || state3) U state1)
[]((state1 & <>(state0 || state2)) -> !state3 U (state0 || state2))
<>connect -> (!(disconnect || poke || send || blockingSend|| receive || blockingReceive) U connect)
[]((connect && <>disconnect) -> !connect U disconnect)
[]((disconnect && <>connect) -> !(disconnect || poke || send || blockingSend ||receive || blockingReceive) U connect)
[](blockingSendBeforeSendPlace -> !Connected)
[](("register a1 e1" && <> "unregister a1 e1") -> ("after notify artists e1" ->((!("notify artists e1" || "notify artists e2") && !"unregister a1 e1") U "notify client event a1 e1")) U "unregister a1 e1")
!("notify client event a1 e1" || "notify client event a2 e1") U ("notify artists e1" ||[]!("notify client event a1 e1" || "notify client event a2 e1"))
[]("notify artists e1" -> (!("notify client event a1 e2" || "notify client event a2 e2") U("notify artists e2" || []!("notify client event a1 e2" || "notify client event a2 e2"))))
[]("e1 szEQ0" -> (!("notify client event a1 e1" || "notify client event a2 e1") U("e1 szGT0" || []!("notify client event a1 e1" || "notify client event a2 e1"))))
<>"register a1 e1" -> (!"notify event a1 e1" U "register a1 e1")
[]("unregister a1 e1" -> (!"notify client event a1 e1" U("register a1 e1" || []!"notify client event a1 e1")))
<>term -> [](("register a1 e1" && (!"unregister a1 e1" U ("register a2 e1" &&(!"unregister a1 e1" && !"unregister a2 e1") U "notify artists e1"))) -><>("notify artist e1" & (!"notify client event a2 e1" U "notify client event a1 e1")))
[]("e1 szEQ2" & ("after register a1 e1" | "after register a2 e1") ->(!("register a2 e1" || "register a1 e1")) U("e1 szLT2" || []!("register a2 e1" || "register a1 e1")))
<>"register a1 e1" -> (!"unregister a1 e1 U register a1 e1")
[]("after unregister a1 e1" -> (!"unregister a1 e1" U ("register a1 e1" || []!"unregister a1 e1")))
[]( term -> ("e1 szEQ0" && "e2 szEQ0"))
("register a1 e1" -> (!term U "unregister a1 e1")) U (term | [](!term))
G("landingButi.pressed" -> F("lift.floor=i" & "lift.door=open"))
G("landingButi.pressed" -> F("lift.floor=i" & "lift.door=open" & "lift.direction=down"))
G("liftButi.pressed" -> F("floor=i" & "door=open"))
G("liftBut3.pressed" & !"lift.empty" -> F(("floor=3" & "dor=open") | "lift.empty"))
G(!("overloaded" & "door=closed"))
[] (p -> q U r)
[] !(cr1 && cr2)
[] (up -> (<> down))
[] (p -> <>q)
[] (b -> ([] !np && <>r))
<> bp
[]<> (a -> (c U d))
[]<> (a -> <> d)
[] ((p1 -> <>p2) && (p3 -> <>p4)) -> [](p5 -> <>p6)
(p && X q) || (q && X p)
<> ((a && b) && b U c)
<> (p U q)
<>[] p
[] (p U !p)
[]<>f
[](f -> []f)
[]<>aftsCC
<>aftsCC
[](aftsCC -> !<>aftsDR)
[](aftsCR -> <>aftsCC)
aftsCR -> <>(aftsCC || aftsDR)
([]<>aftsDR) -> !<>aftsCC
[](p -> <>[]q)
[](pressing -> (!"arm1 in press" && !"arm2 in press"))
[](("State=INIT" && request) -> <>("State=WORK"))
[]("State=WORK" -> <>("State=INIT"))
[](("State=INIT" && request) -> <>(!"State=INIT" && (!"State=INIT" -> <>("State=INIT"))))
[](EndOfCommunication -> BufferEmpty)
[]("Synch(to medium)" -> !"Synch(to medium)" U (Broadcast | []!"Synch(to medium)"))
[]!"data==id"
[](safe -> "one top")
[](safe -> "bounded height")
[](safe -> "unique ids")
[](merging -> <>safe)
[](merging -> !("new id" U safe))
[](SignalFreeWay && !LevelCrossingClosed)
[]((PDcontrolX && <>EndCycle) -> !PDcontrolContraX U EndCycle)
[]((SignalFreeWay && LevelCrossingClosed) -><>("complete RESTORE-AUTOMATICMODE" && LevelCrossingClosed))
[]("return Achieving Task" -> "not subscriber(this,p.memory property)")
[]("task1 property broken" -> <>"task1 terminated")
[]("task1 property broken" -> <>("task1 terminated" || "task1 property repaired"))
[]("RequestedRegisterImpl[i]" -> <>"ServerRegistered[i]")
[]("RequestGetIOR[i]=j" -> ("ServerRegistered[j]" U "GetIOR(i)"))
[]("ClientSend[i]" -> <>"ClientRecv[i]")
[]("ClientSend[i]" -> <>"ServerRecv[i]")
[]("ClientAskResult[i]" -> <>"ClientGetResult[i]")
[]("TestImplKey[j]=ReceivedKey" W "!ServerRegistered[j]")
[]("ReceivedInteger = (SentInteger + 1)")
